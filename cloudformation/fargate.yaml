AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  DBPassSSMName:
    Type: String

  DatabaseStack:
    Type: String

  LoadBalancerStack:
    Type: String

  NetworkStack:
    Type: String

  TargetGroup:
    Type: String
  
  DockerImage:
    Type: String

  TargetGroup2:
    Type: String

  DockerImage2:
    Type: String    

Resources:
  ECSExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      MaxSessionDuration: 3600
      Path: /service-role/

  FargateCluster:
    Type: "AWS::ECS::Cluster"

  FargateService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref FargateCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Ref "AWS::StackName"
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - "Fn::ImportValue": !Sub ${NetworkStack}-ApplicationSG
          Subnets: !Split
            - ","
            - "Fn::ImportValue": !Sub ${NetworkStack}-Subnets
      PlatformVersion: LATEST
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref TaskDefinition

  FargateService2:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref FargateCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Ref "AWS::StackName"
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - "Fn::ImportValue": !Sub ${NetworkStack}-ApplicationSG
          Subnets: !Split
            - ","
            - "Fn::ImportValue": !Sub ${NetworkStack}-Subnets
      PlatformVersion: LATEST
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref TaskDefinition2

  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Cpu: "1024"
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: aws            
            - Name: DBPort
              Value: !ImportValue
                "Fn::Sub": ${DatabaseStack}-DBPort
            - Name: DBAddress
              Value: !ImportValue
                "Fn::Sub": ${DatabaseStack}-DBAddress
            - Name: DBPassSSMName
              Value: !Ref DBPassSSMName
          Essential: true
          Image: !Ref "DockerImage"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
          Memory: "2048"
          MemoryReservation: "2048"
          Name: !Ref "AWS::StackName"
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
      Cpu: "1024"
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      Family: !Ref "AWS::StackName"
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt TaskRole.Arn

  TaskDefinition2:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Cpu: "1024"
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: aws            
            - Name: DBPort
              Value: !ImportValue
                "Fn::Sub": ${DatabaseStack}-DBPort
            - Name: DBAddress
              Value: !ImportValue
                "Fn::Sub": ${DatabaseStack}-DBAddress
            - Name: DBPassSSMName
              Value: !Ref DBPassSSMName
          Essential: true
          Image: !Ref "DockerImage2"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
          Memory: "2048"
          MemoryReservation: "2048"
          Name: !Ref "AWS::StackName"
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
      Cpu: "1024"
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      Family: !Ref "AWS::StackName"
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt TaskRole.Arn

  TaskLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join
        - ""
        - - /ecs/
          - Ref: "AWS::StackName"
      RetentionInDays: 7

  TaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      MaxSessionDuration: 3600
      Path: /service-role/
      Policies:
        - PolicyName: !Sub "TaskRole-${AWS::StackName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameter"
                Resource:
                  - "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPassSSMName}"

Outputs:
  FargateCluster:
    Value: !Ref FargateCluster
    Export:
      Name: !Sub "${AWS::StackName}-FargateCluster"

  FargateService:
    Value: !GetAtt FargateService.Name
    Export:
      Name: !Sub "${AWS::StackName}-FargateService"

  DockerImage:
    Value: !Ref DockerImage
